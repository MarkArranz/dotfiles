###################
### COLOR THEME ###
###################

source = $HOME/.config/hypr/themes/catppuccin/themes/mocha.conf


################
### MONITORS ###
################

{{ if eq .chassisType "laptop" -}}

monitor = eDP-1, 2880x1800@59.99000, 0x0, 1.5

{{- else if eq .chassisType "desktop" -}}

$mainMonitor = DP-2
$monitor2 = DP-1
$monitor3 = HDMI-A-1

monitor = $mainMonitor, highrr,   0x1080, 1
monitor = $monitor2,    highres,  0x0,    1
monitor = $monitor3,    highres,  1920x0, 1

{{- else -}}

# Default:
monitor = , preferred, auto, 1

{{- end }}


###################
### MY PROGRAMS ###
###################

$terminal     = kitty --single-instance
$fileManager  = nautilus
$menu         = rofi -show combi
$browser      = firefox


#################
### AUTOSTART ###
#################

# Autostart necessary processes (like notifications daemons, status bars, etc.)
# Or execute your favorite apps at launch like this:

exec-once = uwsm app -- hyprpanel
exec-once = uwsm app -- clipse -listen


#############################
### ENVIRONMENT VARIABLES ###
#############################

# Use ~/.config/uwsm/env for theming, xcursor, nvidia and toolkit variables,
# and ~/.config/uwsm/env-hyprland for HYPR* and AQ_* variables.


#####################
### LOOK AND FEEL ###
#####################

general {
    {{ if eq .chassisType "laptop" -}}

    gaps_in   = 0
    gaps_out  = 0

    {{- else if eq .chassisType "desktop" -}}

    gaps_in   = 5
    gaps_out  = 5

    {{- end }}

    border_size       = 3
    resize_on_border  = true

    col.active_border   = $pink $sky 45deg
    col.inactive_border = $mantle

    layout = dwindle

    snap {
        enabled = true
    }
}

decoration {
    rounding = 5

    blur {
        {{- if eq .chassisType "laptop" -}}
        # Laptop efficieny setting
        enabled = false
        {{- end }}
        size    = 3
        passes  = 1

        vibrancy = 0.1696
    }

    {{ if eq .chassisType "laptop" -}}

    shadow {
        # Laptop efficieny setting
        enabled = false
    }

    {{- end }}
}

animations {
    enabled = true

    bezier = myBezier, 0.05, 0.9, 0.1, 1.05

    animation = windows,      1, 7,   myBezier
    animation = windowsOut,   1, 7,   default, popin 80%
    animation = border,       1, 10,  default
    animation = borderangle,  1, 8,   default
    animation = fade,         1, 7,   default
    animation = workspaces,   1, 6,   default
}

dwindle {
    # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    pseudotile = true
    # You probably want this
    preserve_split = true
}

master {
    new_status = master
}

misc {
    disable_hyprland_logo = true
}

render {
    direct_scanout = 2
}

debug {
    full_cm_proto = true
}


#############
### INPUT ###
#############

input {
    kb_layout = us
    kb_options = caps:escape_shifted_capslock

    follow_mouse = 1

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    {{ if eq .chassisType "laptop" -}}

    kb_model = apple

    touchpad {
        natural_scroll  = true
        scroll_factor   = 0.8
    }

    {{- end }}
}

{{ if eq .chassisType "laptop" -}}

gestures {
    workspace_swipe = true
    workspace_swipe_fingers = 4
}

{{- end }}

{{ if eq .chassisType "desktop" -}}

cursor {
    default_monitor = $mainMonitor
}

{{- end }}


###################
### KEYBINDINGS ###
###################

$mainMod = SUPER

## LAUNCHING & CLOSING ##
# Open new terminal window:
bind = $mainMod, Return, exec, uwsm app -- $terminal
# Open launcher:
bind = $mainMod, Space, exec, uwsm app -- $menu
# Open clipboard history:
bind = $mainMod, v, exec, uwsm app -- $terminal --class clipse -e 'clipse'
# Open file manager:
bind = $mainMod, e, exec, uwsm app -- $fileManager
# Open browser:
bind = $mainMod, b, exec, uwsm app -- $browser
# Close window:
bind = $mainMod, q, killactive,
# Exit session:
bind = $mainMod, m, exec, uwsm stop
# Lock screen:
bind = $mainMod SHIFT, Escape, exec, hyprlock --immediate-render

## WINDOW & FOCUS CONTROLS ##
bind = $mainMod, f, fullscreen,
bind = $mainMod SHIFT, f, togglefloating,
bind = $mainMod, t, togglesplit, # dwindle

# Move focus with mainMod + vim motions
bind = $mainMod, h, movefocus, l
bind = $mainMod, j, movefocus, d
bind = $mainMod, k, movefocus, u
bind = $mainMod, l, movefocus, r

# Move window with mainMod + Shift + vim motions
bind = $mainMod SHIFT, h, movewindow, l
bind = $mainMod SHIFT, j, movewindow, d
bind = $mainMod SHIFT, k, movewindow, u
bind = $mainMod SHIFT, l, movewindow, r

# Switch workspaces with mainMod + Alt + vim motions
bind = $mainMod ALT, h, workspace, -1
bind = $mainMod ALT, l, workspace, +1

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Special workspace (scratchpad)
bind = $mainMod, s, togglespecialworkspace, magic
bind = $mainMod SHIFT, s, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

## SCREEN BRIGHTNESS ##
bindle = , XF86MonBrightnessUp,    exec, brightnessctl set +5%
bindle = , XF86MonBrightnessDown,  exec, brightnessctl set 5%-

bindle = SHIFT, XF86MonBrightnessUp,   exec, brightnessctl set +1%
bindle = SHIFT, XF86MonBrightnessDown, exec, brightnessctl set 1%-

## KEYBOARD BRIGHTNESS ##
bindle = , XF86KbdBrightnessUp,    exec, brightnessctl --device='smc::kbd_backlight' set +10%
bindle = , XF86KbdBrightnessDown,  exec, brightnessctl --device='smc::kbd_backlight' set 10%-

bindle = SHIFT, XF86KbdBrightnessUp,   exec, brightnessctl --device='smc::kbd_backlight' set +5%
bindle = SHIFT, XF86KbdBrightnessDown, exec, brightnessctl --device='smc::kbd_backlight' set 5%-

## VOLUME AND MEDIA CONTROL ##
bindle = , XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindle = , XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-

bindl = ,      XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindl = SHIFT, XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle

bindl = , XF86AudioPlay,  exec, playerctl play-pause
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioNext,  exec, playerctl next
bindl = , XF86AudioPrev,  exec, playerctl previous

{{- if eq .chassisType "laptop" -}}
bindlt = , XF86PowerOff, exec, loginctl lock-session
{{- end }}

## SCREENSHOTS ##

{{ if eq .chassisType "laptop" -}}
# The key pressed determines **HOW** you want to capture a screenshot:
#   XF86LaunchA (Fn+F3): Manually select a rectangular region or window (by clicking on it)
#   XF86LaunchB (Fn+F4): Captures the currently active output
#
# Use modifier keys to change **WHERE** the screenshot data goes:
#   <Default>: Copy the screenshot data into the clipboard
#   SHIFT: Save the screenshot into a regular file
#   SUPER: Copy AND Save
#   ALT: Open the screenshot in an image editor.

# Selection screenshot:
bind = ,      XF86LaunchA, exec, grimblast copy area
bind = SHIFT, XF86LaunchA, exec, grimblast save area
bind = SUPER, XF86LaunchA, exec, grimblast copysave area
bind = ALT,   XF86LaunchA, exec, grimblast edit area

# Full screen screenshot:
bind = ,      XF86LaunchB, exec, grimblast copy output
bind = SHIFT, XF86LaunchB, exec, grimblast save output
bind = SUPER, XF86LaunchB, exec, grimblast copysave output
bind = ALT,   XF86LaunchB, exec, grimblast edit output

{{- else if eq .chassisType "desktop" -}}

# Use modifier keys to change **WHERE** the screenshot data goes:
#   <Default>: Copy the screenshot data into the clipboard
#   SHIFT: Save the screenshot into a regular file
#   SUPER: Copy AND Save
#   CTRL: Open the screenshot in an image editor.

# Selection screenshot:
bind = ,      Print, exec, grimblast copy area
bind = SHIFT, Print, exec, grimblast save area
bind = SUPER, Print, exec, grimblast copysave area
bind = CTRL,  Print, exec, grimblast edit area

{{- end }}


##################################
### WINDOW AND WORKSPACE RULES ###
##################################

windowrule = suppressevent maximize, class:.* # You'll probably like this.

# Clipse:
windowrule = float,        class:(clipse) # ensure you have a floating window class set if you want this behavior
windowrule = size 622 652, class:(clipse)

# Bitwarden:
windowrule = float,        class:(Bitwarden)
windowrule = size 900 600, class:(Bitwarden)

{{ if eq .chassisType "desktop" -}}

# Bind default workspaces to monitors:
workspace = 1, monitor:$mainMonitor, default:true
workspace = 2, monitor:$monitor2,    default:true
workspace = 3, monitor:$monitor3,    default:true

# Steam Tinker Launch:
windowrule = float, class:(yad) title:(SteamTinkerLaunch)(.*)

# Steam:
windowrule = monitor $mainMonitor,  class:(steam)
windowrule = focusonactivate off,   class:(steam) title:(notificationtoasts)(.*)(desktop)

# Rocket League:
windowrule = monitor $mainMonitor, title:(Rocket League)(.*)

# BakkesMod:
windowrule = noinitialfocus,    initialTitle:BakkesModInjectorCpp
windowrule = monitor $monitor2, initialTitle:BakkesModInjectorCpp
windowrule = center 1,          initialTitle:BakkesModInjectorCpp

# Discord/WebCord:
windowrule = monitor $monitor2, class:(WebCord)
windowrule = monitor $monitor2, class:(com.discordapp.Discord)

{{- end }}
